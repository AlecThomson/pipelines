#Copyright (C) 2020 Inter-University Institute for Data Intensive Astronomy
#See processMeerKAT.py for license details.

import sys
import os
import shutil

import config_parser
import bookkeeping, read_ms
from config_parser import validate_args as va
from recipes.almapolhelpers import *

import logging
from time import gmtime
logging.Formatter.converter = gmtime
logger = logging.getLogger(__name__)
logging.basicConfig(format="%(asctime)-15s %(levelname)s: %(message)s", level=logging.INFO)

def polfield_name(visname):
    msmd.open(visname)
    fieldnames = msmd.fieldnames()
    msmd.close()

    polfield = ''
    if any([ff in ["3C286", "1328+307", "1331+305", "J1331+3030"] for ff in fieldnames]):
        polfield= list(set(["3C286", "1328+307", "1331+305", "J1331+3030"]).intersection(set(fieldnames)))[0]
    elif any(ff in ["3C138", "0518+165", "0521+166", "J0521+1638"] for ff in fieldnames]):
        polfield = list(set(["3C138", "0518+165", "0521+166", "J0521+1638"]).intersection(set(fieldnames)))[0]
    else:
        logger.warning("No valid polarization field found. Defaulting to use the phase calibrator to solve for XY phase.")
        logger.warning("The polarization solutions found will likely be wrong. Please check the results carefully.")

    return polfield

def do_cross_cal_apply(visname, fields, calfiles, caldir):

    fluxfile = calfiles.fluxfile

    polfield = polfield_name(visname)
    if polfield == '':
        polfield = fields.secondaryfield

    base = visname.replace('.ms', '')
    xy0ambpfile = os.path.join(caldir, base+'.xyambcal')
    xy0pfile    = os.path.join(caldir, base+'.xycal')
    calfiles = calfiles._replace(xpolfile=xy0pfile)

    logger.info(" applying calibration -> primary calibrator")
    applycal(vis=visname, field=fields.fluxfield,
            selectdata=False, calwt=False, gaintable=[calfiles.bpassfile, fluxfile, calfiles.dpolfile,calfiles.xpolfile],
            gainfield=[fields.bpassfield, fields.fluxfield, fields.bpassfield, polfield],
            parang=True, interp='nearest,linearflag,nearest,nearest')

    if polfield != fields.secondaryfield:
        logger.info(" applying calibration -> polarization calibrator")
        applycal(vis=visname, field=polfield,
                selectdata=False, calwt=False, gaintable=[calfiles.bpassfile, fluxfile, calfiles.dpolfile,calfiles.xpolfile],
                gainfield=[fields.bpassfield, polfield, fields.bpassfield, polfield],
                parang=True, interp='nearest,linearflag,nearest,nearest')

    logger.info(" applying calibration -> targets")
    field = ','.join(set(','.join([fields.secondaryfield] + [fields.targetfield]).split(','))) #remove duplicate fields
    applycal(vis=visname, field=field, selectdata=False, calwt=False,
            gaintable=[calfiles.bpassfile, fluxfile, calfiles.dpolfile, calfiles.xpolfile],
            gainfield=[fields.bpassfield,fields.secondaryfield,fields.bpassfield,polfield],
            parang=True, interp='nearest,nearest,nearest,nearest')

def do_cross_cal_apply(visname, fields, calfiles, caldir):
    """
    Applies the calibration tables generated by cross_cal.py
    to the input MMS.
    """

    base = visname.replace('.ms', '')
    gain1file   = os.path.join(caldir, base+'.g1cal')
    dtempfile   = os.path.join(caldir, base+'.dtempcal')
    xy0ambpfile = os.path.join(caldir, base+'.xyambcal')
    xy0pfile    = os.path.join(caldir, base+'.xycal')
    calfiles = calfiles._replace(xpolfile=xy0pfile)
    fields = fields._replace(xpolfield=fields.dpolfield)

    xyfield = read_ms.get_xy_field(visname, fields)

    if len(fields.gainfields) > 1:
        fluxfile = calfiles.fluxfile
    else:
        fluxfile = calfiles.gainfile

    applyfields = [fields.targetfield,
                   fields.fluxfield,
                   fields.bpassfield,
                   fields.secondaryfield]

    #for ff in applyfields:
    #    logger.info(" applying calibration -> %s " % ff)
    #    applycal(vis=visname, field=ff, selectdata=False,
    #            gaintable=[calfiles.kcorrfile, calfiles.bpassfile,
    #                fluxfile, calfiles.dpolfile, calfiles.xdelfile,
    #                calfiles.xpolfile, xpfile],
    #            gainfield = [fields.kcorrfield, fields.bpassfield,
    #                fields.fluxfield, fields.dpolfield,
    #                fields.xdelfield, fields.xpolfield,
    #                xyfield],
    #            parang=True, interp='linear,linearflag')


    logger.info("applying calibrations: primary calibrator")
    applycal(vis=visname, field = fields.fluxfield,
            selectdata = False, calwt = False, gaintable = [calfiles.kcorrfile,
                calfiles.bpassfile, fluxfile, calfiles.dpolfile,
                calfiles.xdelfile, calfiles.xpolfile],
        gainfield = [fields.kcorrfield,fields.bpassfield, fields.fluxfield,
            fields.dpolfield,fields.xdelfield, fields.xpolfield],
        parang = True, interp='linear,linearflag')


    logger.info(" applying calibrations: polarization calibrator")
    applycal(vis=visname, field = xyfield,
            selectdata = False, calwt = True, gaintable = [calfiles.kcorrfile,
                calfiles.bpassfile, fluxfile, calfiles.dpolfile,
                calfiles.xdelfile, calfiles.xpolfile],
        gainfield = [fields.kcorrfield,fields.bpassfield,xyfield,
            fields.dpolfield,fields.xdelfield,fields.xpolfield],
        parang= True, interp='linear,linearflag')


    logger.info(" applying calibrations: phase calibrator, targets and extra fields")
    field = ','.join(set([i for i in (','.join([fields.secondaryfield] + [fields.targetfield] + [fields.extrafields]).split(',')) if i])) #remove duplicate and empty fields
    applycal(vis=visname, field = field, selectdata = False, calwt = False,
            gaintable = [calfiles.kcorrfile, calfiles.bpassfile, fluxfile, calfiles.dpolfile, calfiles.xdelfile, calfiles.xpolfile],
            gainfield = [fields.kcorrfield, fields.bpassfield, fields.secondaryfield, fields.dpolfield, fields.xdelfield, fields.xpolfield],
            parang= True, interp='linear,linearflag')



def main(args,taskvals):

    visname = va(taskvals, 'data', 'vis', str)

    calfiles, caldir = bookkeeping.bookkeeping(visname)
    fields = bookkeeping.get_field_ids(taskvals['fields'])

    do_cross_cal_apply(visname, fields, calfiles, caldir)

if __name__ == '__main__':

    bookkeeping.run_script(main)
